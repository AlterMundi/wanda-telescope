# Session Management Rules

## Session Architecture

### Core Components
- `SessionController` - Main orchestrator
- Thread-based execution for non-blocking operation  
- Progress tracking with callbacks
- JSON metadata export for each session

## Session Types

### Photo Session
```python
{
    "type": "photo",
    "count": 100,
    "interval": 30,  # seconds
    "exposure": 10000,  # microseconds
    "iso": 800
}
```

### Video Session
```python
{
    "type": "video",
    "duration": 3600,  # seconds
    "segments": 10,    # split into segments
    "resolution": "1920x1080"
}
```

## Thread Safety Requirements

### Session State Management
```python
class SessionController:
    def __init__(self):
        self._session_lock = threading.Lock()
        self._current_session = None
        self._session_thread = None
```

### Concurrent Access
- Only one active session at a time
- Thread-safe status queries
- Atomic state transitions
- Protected progress updates

## Progress Tracking

### Status Structure
```python
{
    "active": True,
    "type": "photo",
    "progress": {
        "current": 45,
        "total": 100,
        "percentage": 45.0
    },
    "start_time": "2024-01-20T10:30:00",
    "estimated_completion": "2024-01-20T11:20:00"
}
```

### Progress Callbacks
```python
def progress_callback(current, total):
    """Called after each capture."""
    percentage = (current / total) * 100
    logger.info(f"Session progress: {percentage:.1f}%")
```

## Metadata Export

### Session Metadata Format
```json
{
    "session_id": "wanda_20240120_103000",
    "start_time": "2024-01-20T10:30:00",
    "end_time": "2024-01-20T11:20:00",
    "captures": [
        {
            "index": 1,
            "timestamp": "2024-01-20T10:30:00",
            "filename": "capture_001.jpg",
            "exposure": 10000,
            "iso": 800,
            "mount_position": {"ra": 0, "dec": 0}
        }
    ],
    "settings": {
        "camera": { ... },
        "mount": { ... }
    }
}
```

## Error Handling

### Graceful Interruption
```python
def stop_session(self):
    """Stop session gracefully."""
    with self._session_lock:
        if self._current_session:
            self._current_session.stop_requested = True
            # Save partial data
            self._export_metadata(partial=True)
            # Wait for thread completion
            if self._session_thread:
                self._session_thread.join(timeout=5)
```

### Recovery Strategies
1. Save partial session data on error
2. Log detailed error information
3. Reset hardware to safe state
4. Notify UI of session failure

## Storage Management

### Directory Structure
```
wanda_captures/
└── session_20240120_103000/
    ├── metadata.json
    ├── captures/
    │   ├── capture_001.jpg
    │   ├── capture_002.jpg
    │   └── ...
    └── logs/
        └── session.log
```

### Storage Priority
1. USB drive (`/media/astro1/`)
2. Home directory (`~/wanda_captures/`)
3. Current directory (fallback)

## Best Practices

### Session Planning
- Validate parameters before starting
- Check available storage space
- Estimate completion time
- Warn about long durations

### Resource Management
- Release camera between captures if interval > 1min
- Flush metadata after each capture
- Clean up incomplete sessions on startup
- Monitor memory usage for long sessions