# Debugging & Troubleshooting Rules

## Logging Configuration

### Log Levels
```python
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('wanda.log')
    ]
)
```

### Module-Specific Loggers
- `camera.factory` - Hardware detection
- `camera.implementations` - Camera operations
- `mount.controller` - Tracking operations
- `session.controller` - Session management
- `web.app` - API requests/responses

## Common Debugging Commands

### Hardware Detection
```bash
# Check camera detection process
grep "detected" wanda.log

# Verify camera type (mock vs real)
grep -E "Mock PiCamera|picamera2.picamera2" wanda.log

# Test camera directly
rpicam-still --list-cameras
vcgencmd get_camera
v4l2-ctl --list-devices
```

### GPIO & Mount
```bash
# Check GPIO permissions
groups | grep gpio
ls -la /dev/gpio*

# Test GPIO access
gpio readall

# Monitor stepper signals
gpio monitor 23 24 25 8
```

### Performance Analysis
```bash
# Profile CPU usage
python -m cProfile -s cumtime main.py

# Memory profiling
python -m memory_profiler main.py

# Check for memory leaks
valgrind --leak-check=full python main.py
```

## Debug Environment Variables

### Force Mock Hardware
```bash
export MOCK_CAMERA=1      # Use mock camera
export MOCK_MOUNT=1       # Use mock mount
export DEBUG_LEVEL=DEBUG  # Verbose logging
export SKIP_FRAMES=0      # Disable frame skipping
```

### Performance Debugging
```bash
export PROFILE_CAPTURES=1  # Log capture timings
export TRACE_THREADS=1     # Thread lifecycle logging
export LOG_MEMORY=1        # Memory usage tracking
```

## Common Issues & Solutions

### Camera Not Detected
```python
# Debug checklist:
1. Check CSI cable connection
2. Verify camera enabled in raspi-config
3. Check /boot/config.txt for camera settings
4. Test with rpicam-still
5. Check dmesg for camera errors
```

### Import Errors (picamera2)
```python
# Solutions in order:
1. Install system packages: sudo apt install python3-picamera2
2. Check numpy version: pip show numpy (must be <2.0.0)
3. Add system path: sys.path.append('/usr/lib/python3/dist-packages')
4. Use subprocess fallback
```

### GPIO Permission Denied
```bash
# Fix permissions:
sudo usermod -a -G gpio,video,i2c $USER
# Logout and login again
# Or use sudo for testing (not recommended)
```

### Memory Issues
```python
# Memory leak indicators:
- Increasing memory usage over time
- Frame buffer not being cleared
- Threads not properly terminated
- Circular references in callbacks
```

## Debug Logging Patterns

### Entry/Exit Logging
```python
def capture_image(self):
    logger.debug(f"Entering capture_image()")
    try:
        # Implementation
        logger.debug(f"Successfully captured image")
        return image
    except Exception as e:
        logger.error(f"Failed to capture image: {e}", exc_info=True)
        raise
    finally:
        logger.debug(f"Exiting capture_image()")
```

### Performance Logging
```python
import time

start = time.perf_counter()
# Operation
elapsed = time.perf_counter() - start
logger.info(f"Operation completed in {elapsed:.3f}s")
```

### State Logging
```python
logger.debug(f"Camera state: exposure={self.exposure_time}, "
            f"iso={self.iso}, night_vision={self.night_vision}")
```

## Interactive Debugging

### Python Debugger
```python
import pdb
pdb.set_trace()  # Breakpoint

# Or use IPython for better experience
from IPython import embed
embed()  # Drop into IPython shell
```

### Remote Debugging (VS Code)
```python
import debugpy
debugpy.listen(5678)
debugpy.wait_for_client()  # Pause until debugger connects
```

## Test Debugging

### Verbose Test Output
```bash
pytest -vvs tests/             # Very verbose with stdout
pytest --tb=long               # Full traceback
pytest --pdb                   # Drop into debugger on failure
pytest --lf                    # Run last failed tests
```

### Test Coverage Gaps
```bash
pytest --cov --cov-report=html
# Open htmlcov/index.html
# Look for red (uncovered) lines
```